The system is defined under a central BehaviorSpecification that interconnects three key components: Stimulus, RTApp (the main application), and Display. The process begins with the Stimulus node, which continuously generates real-time input data through its output port named “stim_rt_out_port.” This raw data is then transmitted to the RTApp node via the “stim_rt_channel,” a dedicated link configured with a queue size of 8 and operating with rendezvous semantics to guarantee synchronized delivery.

Inside the RTApp node, the processing pipeline is decomposed into four sequential processes designed to operate under strict real-time constraints. The first process, “acquisition,” receives the incoming data from the Stimulus node via the “stim_acquisition_channel” and performs initial data capture and pre-processing. The pre-processed data is then forwarded to the second process, “filtering,” via the “acq_filter_channel,” where real-time signal conditioning is applied to enhance the quality of the input signal. Next, the conditioned data is passed to the third process, “decision,” through the “filter_decision_channel.” In this stage, the system computes control decisions based on the filtered signal, possibly implementing algorithms for thresholding or dynamic adjustments. Finally, the “control” process takes over by dispatching the computed commands or processed outputs through the “decision_control_channel.” The final processed data exits the RTApp node via its output port “system_display_out_port” and is delivered to the Display node through the “disp_channel.” The Display node, equipped with an input port “system_display_in_port,” then renders the final output for user interaction or further processing.

Each channel in the system is explicitly defined with specific message payloads – for example, “stim_rt_payload,” “acquisition_payload,” “filtering_payload,” “decision_payload,” and “control_payload” – ensuring that data integrity, timing, and buffering requirements are rigorously maintained across the entire processing pipeline. This detailed interconnection of processes and channels enables the RT App to meet stringent real-time performance criteria while facilitating analysis, simulation, and eventual synthesis into an embedded hardware/software platform.