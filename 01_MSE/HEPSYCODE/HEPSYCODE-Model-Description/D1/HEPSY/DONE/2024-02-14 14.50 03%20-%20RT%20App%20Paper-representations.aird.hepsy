At the heart of the model is a central BehaviorSpecification that interconnects three main components: Stimulus, RT App Paper, and Display. The process begins at the Stimulus node, which produces real-time input data via its output port named “stim_rtPaper_out_port.” This data is then transmitted to the RT App Paper node through the “stim_rtPaper_channel,” a dedicated communication link configured with a queue size of 8 and rendezvous semantics to ensure synchronized delivery. Within the RT App Paper node, the processing pipeline is partitioned into four sequential processes. The first process, “capture,” receives the raw input via the “stim_capture_channel” and performs initial data acquisition. The captured data is forwarded to the “preprocess” process through the “capture_preprocess_channel,” where filtering and conditioning are applied to improve signal quality. The output of preprocessing is then sent to the “analyze” process via the “preprocess_analyze_channel,” where real-time analysis extracts key features and makes decisions based on the conditioned data. Finally, the “control” process receives the analyzed data via the “analyze_control_channel” and generates the final commands or outputs required by the system. The processed data exits the RT App Paper node through the “system_display_out_port” and is delivered to the Display node via the “disp_rtPaper_channel,” which connects to the Display node’s input port “system_display_in_port.” Each channel is precisely defined with explicit message payloads and synchronization parameters, ensuring that data integrity and real-time performance constraints are rigorously maintained throughout the entire processing chain.