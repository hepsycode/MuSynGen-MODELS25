In the Hepsy Example model, the system is defined by a central BehaviorSpecification that interconnects three key components: Stimulus, HepsyExample, and Display. The operation begins with the Stimulus node, which produces raw data through its output port named “stim_system_out_port.” This data is conveyed to the main application node via the “stim_acq_channel,” a dedicated communication link configured with a queue size of 8 and rendezvous semantics to ensure timely and synchronized transfer. Within the HepsyExample node, the processing pipeline is decomposed into three sequential processes. The first process, “dataAcquisition,” receives the raw data from the Stimulus node through the “stim_acq_channel” and performs initial capture and conditioning. Its output is then transmitted to the second process, “dataProcessing,” via the “acq_proc_channel.” In this stage, the data is further refined and transformed, preparing it for final control actions. The refined output is then forwarded to the third process, “dataControl,” over the “proc_ctrl_channel,” where control algorithms are applied and final decisions are made regarding the processed signal. Once the processing is complete, the final data is emitted from the HepsyExample node through the “system_display_out_port” and is delivered to the Display node via the “main_disp_channel.” The Display node receives the processed output through its input port “system_display_in_port,” where the final result is rendered. Each channel and process in the model is explicitly defined with precise message payloads and synchronization parameters, ensuring that data integrity, timing, and buffering requirements are rigorously maintained throughout the entire embedded system.