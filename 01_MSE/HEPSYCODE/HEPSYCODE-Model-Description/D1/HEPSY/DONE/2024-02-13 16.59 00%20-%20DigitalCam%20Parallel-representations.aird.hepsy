At the heart of the DigitalCam model is a central BehaviorSpecification that integrates three interconnected components: Stimulus, DigitalCam, and Display. The process begins with the Stimulus node, which produces raw image data through its output port named “stim_system_out_port". This data is delivered to the DigitalCam node via the “stim_system_channel,” a dedicated communication link configured with a queue size of 8 and rendezvous semantics for timely and synchronized data transfer. Within the DigitalCam node, the image processing pipeline is organized into a parallelized codec architecture. Initially, the raw data is pre-processed by the “ccdpp” process, which receives the incoming data via the “stim_ccdpp_channel.” The pre-processed image data is then distributed concurrently to eight parallel codec processes through dedicated channels: “ccdpp_codec0_channel,” “ccdpp_codec1_channel,” “ccdpp_codec2_channel,” “ccdpp_codec3_channel,” “ccdpp_codec4_channel,” “ccdpp_codec5_channel,” “ccdpp_codec6_channel,” and “ccdpp_codec7_channel.” These codec processes, named “codec0” through “codec7,” independently encode their assigned portions of the image data while operating in parallel, ensuring high throughput and effective load balancing. Their individual outputs are subsequently merged within the DigitalCam node using the “codec_merge_channel.” Finally, the merged and fully encoded image is transmitted out of the DigitalCam node through the “system_display_out_port” and delivered via the “display_channel” to the Display node’s input port “system_display_in_port,” where the final image is rendered. Each channel in the system is precisely defined with specific message payloads and synchronization parameters, ensuring that data integrity, timing, and buffering constraints are rigorously maintained throughout the entire processing pipeline.