The modeled embedded application represents a complete digital imaging pipeline, starting from an input stimulus and ending at a display node. The system is structured around a BehaviorSpecification that integrates multiple communicating components: Stimulus, DigitalCam, and Display. Each component is implemented as a node, with communication defined through typed ports and message-based channels, enabling explicit modeling of dataflow and synchronization.

The Stimulus node acts as the systemâ€™s input generator. It contains a single output port named stim_system_out_port, which emits data toward the processing system. This port is connected to the DigitalCam node through the channel stim_system_channel, a point-to-point communication channel defined as rendezvous-enabled and configured with a buffer size of 8. The messages carried on this channel are defined by the stim_system_payload, which includes an entry called stim_01 of type sc_uint, representing raw sensor data or synthetic image data injected into the system for processing.

At the heart of the system lies the DigitalCam structured node, which encapsulates the internal processing logic. Within DigitalCam, three processes are defined: ccdpp, cntrl, and codec. The ccdpp process is the first internal consumer of the incoming stimulus. It pre-processes the incoming image data and sends its output via ccdpp_cntrl_channel to the cntrl process. This channel has a queue size of 16 and uses rendezvous communication. The message ccdpp_cntrl_payload includes a field img_01, again of type sc_uint, denoting processed image data ready for further control.

The cntrl process orchestrates the internal workflow, receiving data from ccdpp and managing communication with both the codec process and feedback channels. Its output flows into the codec through cntrl_codec_channel, which transmits the cntrl_codec_payload containing img_01_08, a more refined or compressed data representation. The feedback path is modeled via the codec_cntrl_channel, a control loop that sends codec_cntrl_payload messages, with an img_01_ack field used for acknowledgments or runtime control between codec and controller.

Upon completion of internal processing, data exits the DigitalCam subsystem through its output port system_display_out_port, and is sent to the Display node via one or more pChannels. Specifically, the Display node contains the port system_display_in_port, which connects back to DigitalCam. This connection is implemented through a rendezvous-enabled channel, mirroring the structural consistency of the rest of the architecture. Internally, the Display node also maintains an additional pChannel that connects ports within its own context, possibly modeling a post-processing or visualization stage.

Together, the system forms a complete end-to-end flow: from the Stimulus node, through the three-stage processing pipeline of DigitalCam, to the Display node. Each interaction is formally defined with message payloads, queuing behavior, and synchronization semantics. This level of precision enables functional simulation, schedulability analysis, and eventual synthesis into hardware/software partitions, forming a robust foundation for embedded system design in image processing applications.