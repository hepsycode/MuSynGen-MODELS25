{
    "context": "# CAEX Graphical Modeling Workbench and AutomationML\n\n## Overview\n\nThe CAEX (Computer Aided Engineering Exchange) Graphical Modeling Workbench is a sophisticated tool designed to facilitate the creation, modification, and visualization of CAEX models. CAEX is a neutral data format used for storing hierarchical object information, such as plant topologies, and is defined by the IEC 62424 standard. AutomationML (Automation Markup Language) is an open standard that builds upon CAEX to enable the exchange of plant engineering information across various engineering disciplines.\n\n## CAEX MDE Workbench\n\nThe CAEX Model-Driven Engineering (MDE) Workbench is an Eclipse-based tool that provides a comprehensive suite for working with CAEX models. It supports both CAEX 2.15 and CAEX 3.0 versions and offers a range of editors and tools for different modeling tasks.\n\n### Features\n\n- **Metamodels**: The workbench includes metamodels for CAEX 2.15 and CAEX 3.0, defined with Ecore. These metamodels are essential for tool developers to programmatically access CAEX models.\n- **Tree-Based Editor**: This editor allows for the creation, modification, and inspection of CAEX 2.15 and CAEX 3.0 models using a hierarchical tree structure.\n- **Graphical Editor**: For CAEX 3.0, a graphical editor is available to visualize Instance Hierarchies. This editor is based on the Sirius framework.\n- **Textual Editor**: A textual editor is provided for CAEX 2.15 models, enabling textual representation and manipulation of Instance Hierarchies.\n- **Modeling Rules**: The workbench includes modeling rules for the correct usage of CAEX with AutomationML, implemented using EVL scripts.\n- **Migration Operations**: Tools are available for converting CAEX 2.15 models to CAEX 3.0 models, including checker and transformation components.\n\n### Installation\n\nTo use the CAEX MDE Workbench, you need to install the Eclipse Modeling Tools and several plugins, including Sirius, Xtext, OCL, ATL, ATL EMFTVM, and Epsilon. Detailed installation instructions can be found in the [CAEX MDE Workbench repository](https://github.com/amlModeling/caex-workbench/tree/variability).\n\n### How to Use\n\n- **CAEX Metamodels**: Located in the `caex.caex215` and `caex.caex30` plugin projects, these metamodels can be used to define CAEX models.\n- **Tree-Based CAEX Editors**: Create a new CAEX model by selecting `File > New > Other... > CAEX/CAEX Model`. Use the tree-based editor to add elements and set attributes.\n- **Graphical CAEX 3.0 Editor**: Visualize Instance Hierarchies by creating a Representations File and selecting the \"CAEX 3.0\" viewpoint.\n- **Textual CAEX 2.15 Editor**: Create a textual CAEX model by specifying a file with the `.caext` extension and using the textual editor.\n- **AutomationML Modeling Rules**: Validate modeling rules on CAEX 3.0 models using the provided EVL script and launch configuration.\n- **CAEX 2.15 to 3.0 Migration**: Use the checker and transformation components to migrate CAEX 2.15 models to CAEX 3.0.\n\n## AutomationML\n\nAutomationML is a comprehensive XML-based data modeling language that combines several existing XML data formats to model various aspects of engineering. It uses CAEX as its core representation data format and incorporates other formats for geometry, kinematics, and logic.\n\n### Basic Architecture\n\nAutomationML has a lean and distributed file architecture that combines established XML data formats:\n\n- **CAEX (IEC 62424)**: For object topologies, properties, and relations.\n- **COLLADA (ISO/PAS 17506:2012)**: For geometries and kinematics.\n- **PLCopen XML**: For discrete behavior.\n\n### Getting Started with AutomationML\n\n- **Understand the Architecture**: Familiarize yourself with the architecture of AutomationML, including role classes, interface classes, and the instance hierarchy.\n- **Gain Basic Knowledge**: Refer to existing examples and publications from AutomationML e.V. Consider taking a training course.\n- **Examine the Use Case**: Understand the application-specific data and model the relevant data.\n- **Application-Specific Mapping and Modeling**: Map the relevant modeling concepts using role classes and interface classes.\n- **Implementation Phase**: Create the necessary tool interfaces and systems required for AutomationML-based data logistics.\n\n## Related Tools and Technologies\n\n### Obeo Designer\n\nObeo Designer is a tool that guarantees the setup and deployment of industrial-strength modeling workbenches created with Sirius. It provides professional support and collaborative features, allowing teams to work on visual representations of the same data without conflicts. Obeo Designer offers services for securing the creation and maintenance of modeling workbenches and provides access to an Open Innovation program for contributing to the Sirius roadmap.\n\n### Sirius\n\nSirius is an Eclipse-based framework used for creating modeling workbenches. It is integrated into the CAEX MDE Workbench for the graphical editor and is supported by Obeo Designer for professional and collaborative features.\n\n## Conclusion\n\nThe CAEX Graphical Modeling Workbench and AutomationML provide a powerful combination for modeling and exchanging plant engineering information. The workbench's various editors and tools, along with the comprehensive data modeling capabilities of AutomationML, enable efficient and effective engineering workflows.\n\n## References\n\n- [CAEX MDE Workbench GitHub Repository](https://github.com/amlModeling/caex-workbench/tree/variability)\n- [AutomationML Official Website](https://www.automationml.org/about-automationml/automationml/)\n- [Obeo Designer](https://www.obeodesigner.com/en/)\n- [CAEX Wikipedia Page](https://en.wikipedia.org/wiki/CAEX)\n- [AutomationML Wikipedia Page](https://en.wikipedia.org/wiki/AutomationML)"
}